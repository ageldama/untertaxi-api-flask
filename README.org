#+TITLE: Untertaxi API
#+AUTHOR: Jong-Hyouk Yun

* 설치, 테스트, 실행

** 로컬에서 실행하려면 필요한것.
  1. Python 3.6+
  2. Postgres 10+

** Docker을 이용하여 실행하기 위해 필요한것.
   1. docker-compose 1.21+
   2. docker 18+

** Docker-Compose 실행
   1. ~cd docker-compose/~
   2. ~docker-compose up~
   3. http://localhost:5000 에 서버 시작되었음.

** Virtualenv(venv)을 설정하여 로컬 실행환경 만들기
   1. ~virtualenv -p python3 venv~ :: venv 생성.
   2. ~source venv/bin/activate~ :: venv 활성화.
   3. ~pip install -r requirements.txt~ :: 의존성 모듈들 venv내에
        설치.

** 로컬에서 테스트 실행
   1. ~py.test~ :: 테스트 실행.
		   - 테스트 실행시 SQLite3 inmem DB 사용하여 별도의
                     데이터베이스 불필요.

** 로컬에서 서버 실행
   1. DB :: ~127.0.0.1:5432~ 에 Postgres 실행되고 있어야함.
      1) 사용자명/패스워드는 ~postgres~ / ~postgres~.
      2) ~untertaxi_api~ database생성 :: ~CREATE DATABASE untertaxi_api~
   2. 데이터베이스 마이그레이션 실행.
      1) ~./manage.py db upgrade~
      2) 최초 한번 데이터베이스 초기화를 위해 필요하고, 이후에 서버
         실행시는 불필요.
   3. 서버 실행.
      1) ~./manage.py runserver~





* API 문서

** 로그인 방식
   1) [[https://tools.ietf.org/html/rfc2617][HTTP Basic Authentication]] 을 사용.
      - 다만, ~password~ 을 서버의 ~SECRET_KEY~ 을 이용하여 SHA-256
        해시하여 전송.
   2) 참고 예제 ::
                   https://github.com/ageldama/untertaxi-api-flask/blob/master/misc/new-user-and-ride-request.py#L30
   3) 이하 로그인이 필요한 API은 항상 별도로 표시하지않고,
      1) 로그인이 불필요한 경우에만 표기한다.
      2) 로그인 실패시 HTTP응답 코드로 *401 UNAUTHORIZED* 이며, 로그인
         필요한 API에서 반복적으로 언급하지 않겠다.


** 회원 (승객, 기사)
   - **회원** 리소스는 ~MemberType~ enum에 따라서 승객과 기사로 구분.
     1) 승객 :: ~PASSENGER~
     2) 기사 :: ~DRIVER~

*** 회원 가입 ~PUT /member~
    1) 요청
       1) 로그인 불필요.
       2) JSON Request Body
	  #+BEGIN_SRC javascript
          {
            "email":  "foo@bar.com",  // 문자열, 필수.
            "password": "mypass",     // 문자열, 필수. 평문 비밀번호.
            "member_type": "DRIVER"
          }
	  #+END_SRC
    2) 응답
       1) ~201~ *CREATED* :: 성공. 응답본문없음.
       2) ~400~ *BAD REQUEST* :: 실패. 응답본문없음.
	  1) 잘못된 이메일 양식.
	  2) 혹은 이미 가입된 이메일 주소.
	  3) 비밀번호가 4글자 이하.
	  4) 잘못된 회원타입(MemberType).
	  

*** 회원 정보 ~GET /member/<member_id>~
    1) 다른 *배차요청 목록* 과 같은 API으로 얻은 ~member_id~ 에 맞는
       회원정보를 조회할때 사용.
    2) 요청
       2) 요청 본문 없음.
       3) ~<member_id>~ path variable으로 정보를 얻고 싶은 회원 ID을
          지정.
    3) 응답
       1) ~200~ *OK* :: 성공. 
	  1) JSON으로 다음과 같은 응답.
	     #+BEGIN_SRC javascript
               {
                   "email": "foo@bar.com", // 회원 이메일.
                   "active": true,  // 삭제되지않은 회원인가.
                   "created_at": "2018-05-18 12:33:12",  // 최초 생성일, 문자열.
                   "update_at": "2018-05-18 12:33:12",  // 최종 수정일, 문자열.
               }
	     #+END_SRC
       2) ~400~ *BAD REQUEST* :: 실패
	  - 해당 ~member_id~ 의 회원이 없다.


** 주소

*** 주소 목록 ~GET /address~
    1) 로그인한 사용자의 계정으로 등록한 배차 목적지 주소 목록.
       - 다른 사람이 등록한 주소지는 제외된다.
    2) 응답
       1) ~200~ *OK* :: 응답JSON본문
			#+BEGIN_SRC javascript
                          [
                              // 다음의 배열,
                              {
                                  "id": 12345,  // 주소지id
                                  "member_id": 987,  // 이 주소지를 등록한 회원id
                                  "address": "이젠 여기",  // 주소지 문자열
                                  "created_at": "...",  // 최초 등록일시
                                  "updated_at": "...",  // 최종 수정일시
                                  "active": true  // 삭제여부
                              }
                          ]
			#+END_SRC

*** 주소 등록 ~PUT /address~
    1) 새로운 배차 목적지를 등록한다.
       - 기존에 등록해놓은 목적지가 없을 경우에 사용.
    2) 요청
       1) 요청본문 JSON
	  #+BEGIN_SRC javascript
            {
                "address": "아까 거기"  // 문자열, 100글자. 필수.
            }
	  #+END_SRC
    3) 응답
       1) ~200~ *OK* :: 성공.
	  1) JSON응답
	     #+BEGIN_SRC javascript
               {
                   "id": 1234 // 등록한 address의 id
               }
	     #+END_SRC
       2) ~400~ *BAD REQUEST* :: 실패
	  1) 응답본문없음.
	  2) 요청의 ~address~ 필드가 없거나,
	  3) 요청의 주소 문자열이 100글자 초과.

*** 주소 정보 ~GET /address/<address_id>~
    1) 지정한 주소지 id의 정보를 얻는다.
       - 내가 등록한 주소지가 아니어도, 배차요청등을 표시하기 위해
         다른 사람의 주소지 정보도 얻을수있다.
    2) 요청
       1) Path Variable으로 ~address_id~ 주소지 id 지정.
    3) 응답
       1) ~200~ *OK* :: 응답JSON본문
			#+BEGIN_SRC javascript
                          {
                              "id": 12345,  // 주소지id
                              "member_id": 987,  // 이 주소지를 등록한 회원id
                              "address": "이젠 여기",  // 주소지 문자열
                              "created_at": "...",  // 최초 등록일시
                              "updated_at": "...",  // 최종 수정일시
                              "active": true  // 삭제여부
                          }
			#+END_SRC
       2) ~400~ *BAD REQUEST* :: 실패
	    - 지정한 ~address_id~ 의 주소지가 등록되어 있지 않다.

*** 주소 삭제 ~DELETE /address/<address_id>~
    1) 로그인한 회원이 등록한 배차요청 목적지 주소를 삭제한다.
    2) 요청
       1) Path Variable으로 삭제할 ~address_id~ 을 지정.
    3) 응답
       1) ~204~ *NO CONTENT* :: 성공적으로 삭제. 응답본문없음.
       2) ~400~ *BAD REQUEST* :: 해당 ~address_id~ 의 주소 없음.
       3) ~401~ *UNAUTHORIZED* :: 지정한 주소지가 요청한 사람의 회원과
            같지 않아 삭제를 거부.

** 배차요청

*** 배차요청 생성 ~PUT /ride_request~
*** 배차요청 목록 ~GET /ride_request~
*** 배차요청 취소 ~DELETE /ride_request/<ride_request_id>~
*** 배차요청 승인 ~POST /ride_request/<ride_request_id>/accept~
*** 배차요청 도착 ~POST /ride_request/<ride_request_id>/arrive~

