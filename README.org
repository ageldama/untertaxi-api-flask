#+TITLE: Untertaxi API
#+AUTHOR: Jong-Hyouk Yun

* 설치, 테스트, 실행

** 로컬에서 실행하려면 필요한것.
  1. Python 3.6+
  2. Postgres 10+

** Docker을 이용하여 실행하기 위해 필요한것.
   1. docker-compose 1.21+
   2. docker 18+

** Docker-Compose 실행
   1. ~cd docker-compose/~
   2. ~docker-compose up~
   3. http://localhost:5000 에 서버 시작되었음.

** Virtualenv(venv)을 설정하여 로컬 실행환경 만들기
   1. ~virtualenv -p python3 venv~ :: venv 생성.
   2. ~source venv/bin/activate~ :: venv 활성화.
   3. ~pip install -r requirements.txt~ :: 의존성 모듈들 venv내에
        설치.

** 로컬에서 테스트 실행
   1. ~py.test~ :: 테스트 실행.
		   - 테스트 실행시 SQLite3 inmem DB 사용하여 별도의
                     데이터베이스 불필요.

** 로컬에서 서버 실행
   1. DB :: ~127.0.0.1:5432~ 에 Postgres 실행되고 있어야함.
      1) 사용자명/패스워드는 ~postgres~ / ~postgres~.
      2) ~untertaxi_api~ database생성 :: ~CREATE DATABASE untertaxi_api~
   2. 데이터베이스 마이그레이션 실행.
      1) ~./manage.py db upgrade~
      2) 최초 한번 데이터베이스 초기화를 위해 필요하고, 이후에 서버
         실행시는 불필요.
   3. 서버 실행.
      1) ~./manage.py runserver~





* API 문서

** 로그인 방식
   1) [[https://tools.ietf.org/html/rfc2617][HTTP Basic Authentication]] 을 사용.
      - 다만, ~password~ 을 서버의 ~SECRET_KEY~ 을 이용하여 SHA-256
        해시하여 전송.
   2) 참고 예제 ::
                   https://github.com/ageldama/untertaxi-api-flask/blob/master/misc/new-user-and-ride-request.py#L30
   3) 이하 로그인이 필요한 API은 항상 *로그인 필요* 으로 표시함.
      - 로그인 실패시 HTTP응답 코드로 *401 Unauthorized*.


** 회원 (승객, 기사)
   - **회원** 리소스는 ~MemberType~ enum에 따라서 승객과 기사로 구분.
     1) 승객 :: ~PASSENGER~
     2) 기사 :: ~DRIVER~

*** 회원 가입 ~PUT /member~
    1) 요청
       1) 로그인 불필요.
       2) JSON Request Body
	  #+BEGIN_SRC javascript
          {
            "email":  "foo@bar.com",  // 문자열, 필수.
            "password": "mypass",     // 문자열, 필수. 평문 비밀번호.
            "member_type": "DRIVER"
          }
	  #+END_SRC
    2) 응답
       1) ~201~ *NO CONTENT* :: 성공. 응답본문없음.
       2) ~400~ *BAD REQUEST* :: 실패. 응답본문없음.
	  1) 잘못된 이메일 양식.
	  2) 혹은 이미 가입된 이메일 주소.
	  3) 비밀번호가 4글자 이하.
	  4) 잘못된 회원타입(MemberType).
	  

*** 회원 정보 ~GET /member/<member_id>~
    1) 다른 *배차요청 목록* 과 같은 API으로 얻은 ~member_id~ 에 맞는
       회원정보를 조회할때 사용.
    2) 요청
       1) 로그인 필요.
       2) 요청 본문 없음.
       3) ~<member_id>~ path variable으로 정보를 얻고 싶은 회원 ID을
          지정.
    3) 응답
       1) ~200~ *OK* :: 성공. 
			1) JSON으로 다음과 같은 응답.
			   #+BEGIN_SRC javascript
			   #+END_SRC

** 주소

*** 주소 등록 ~PUT /address~
*** 주소 정보 ~GET /address/<address_id>~
*** 주소 삭제 ~DELETE /address/<address_id>~

** 배차요청

*** 배차요청 생성 ~PUT /ride_request~
*** 배차요청 목록 ~GET /ride_request~
*** 배차요청 취소 ~DELETE /ride_request/<ride_request_id>~
*** 배차요청 승인 ~POST /ride_request/<ride_request_id>/accept~
*** 배차요청 도착 ~POST /ride_request/<ride_request_id>/arrive~

