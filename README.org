#+TITLE: Untertaxi API
#+AUTHOR: Jong-Hyouk Yun

* 설치, 테스트, 실행

** 로컬에서 실행하려면 필요한것.
  1. Python 3.6+
  2. Postgres 10+

** Docker을 이용하여 실행하기 위해 필요한것.
   1. docker-compose 1.21+
   2. docker 18+

** Docker-Compose 실행
   1. ~cd docker-compose/~
   2. ~docker-compose up~
   3. http://localhost:5000 에 서버 시작되었음.

** Virtualenv(venv)을 설정하여 로컬 실행환경 만들기
   1. ~virtualenv -p python3 venv~ :: venv 생성.
   2. ~source venv/bin/activate~ :: venv 활성화.
   3. ~pip install -r requirements.txt~ :: 의존성 모듈들 venv내에
        설치.

** 로컬에서 테스트 실행
   1. ~py.test~ :: 테스트 실행.
		   - 테스트 실행시 SQLite3 inmem DB 사용하여 별도의
                     데이터베이스 불필요.

** 로컬에서 서버 실행
   1. DB :: ~127.0.0.1:5432~ 에 Postgres 실행되고 있어야함.
      1) 사용자명/패스워드는 ~postgres~ / ~postgres~.
      2) ~untertaxi_api~ database생성 :: ~CREATE DATABASE untertaxi_api~
   2. 데이터베이스 마이그레이션 실행.
      1) ~./manage.py db upgrade~
      2) 최초 한번 데이터베이스 초기화를 위해 필요하고, 이후에 서버
         실행시는 불필요.
   3. 서버 실행.
      1) ~./manage.py runserver~





* API 문서

** 로그인 방식 설명
   1) [HTTP Basic Authentication](https://tools.ietf.org/html/rfc2617)


** 회원 (승객, 기사)

*** 회원 가입 ~PUT /member~

*** 회원 정보 ~GET /member/<member_id>~

** 주소

*** 주소 등록 ~PUT /address~
*** 주소 정보 ~GET /address/<address_id>~
*** 주소 삭제 ~DELETE /address/<address_id>~

** 배차요청

*** 배차요청 생성 ~PUT /ride_request~
*** 배차요청 목록 ~GET /ride_request~
*** 배차요청 취소 ~DELETE /ride_request/<ride_request_id>~
*** 배차요청 승인 ~POST /ride_request/<ride_request_id>/accept~
*** 배차요청 도착 ~POST /ride_request/<ride_request_id>/arrive~

